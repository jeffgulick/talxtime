[{"C:\\Users\\jeffg\\react\\Chat-app-fullstack\\client\\src\\index.js":"1","C:\\Users\\jeffg\\react\\Chat-app-fullstack\\client\\src\\App.js":"2","C:\\Users\\jeffg\\react\\Chat-app-fullstack\\client\\src\\Router.js":"3","C:\\Users\\jeffg\\react\\Chat-app-fullstack\\client\\src\\Containers\\Navigation.js":"4","C:\\Users\\jeffg\\react\\Chat-app-fullstack\\client\\src\\Redux\\Store.js":"5","C:\\Users\\jeffg\\react\\Chat-app-fullstack\\client\\src\\Containers\\Login.js":"6","C:\\Users\\jeffg\\react\\Chat-app-fullstack\\client\\src\\Components\\Landing.js":"7","C:\\Users\\jeffg\\react\\Chat-app-fullstack\\client\\src\\Components\\Chat\\MessageView.js":"8","C:\\Users\\jeffg\\react\\Chat-app-fullstack\\client\\src\\Components\\Register.js":"9","C:\\Users\\jeffg\\react\\Chat-app-fullstack\\client\\src\\Components\\Navigation.js":"10","C:\\Users\\jeffg\\react\\Chat-app-fullstack\\client\\src\\Redux\\reducers.js":"11","C:\\Users\\jeffg\\react\\Chat-app-fullstack\\client\\src\\Redux\\state.js":"12","C:\\Users\\jeffg\\react\\Chat-app-fullstack\\client\\src\\Redux\\actions.js":"13","C:\\Users\\jeffg\\react\\Chat-app-fullstack\\client\\src\\Components\\Login.js":"14","C:\\Users\\jeffg\\react\\Chat-app-fullstack\\client\\src\\Containers\\Chat.js":"15","C:\\Users\\jeffg\\react\\Chat-app-fullstack\\client\\src\\Components\\Chat\\SideBar.js":"16","C:\\Users\\jeffg\\react\\Chat-app-fullstack\\client\\src\\Containers\\Contacts.js":"17","C:\\Users\\jeffg\\react\\Chat-app-fullstack\\client\\src\\Containers\\SideBarList.js":"18","C:\\Users\\jeffg\\react\\Chat-app-fullstack\\client\\src\\Components\\Chat\\Chat.js":"19","C:\\Users\\jeffg\\react\\Chat-app-fullstack\\client\\src\\Components\\Chat\\Contacts.js":"20","C:\\Users\\jeffg\\react\\Chat-app-fullstack\\client\\src\\Components\\Chat\\SideBarList.js":"21","C:\\Users\\jeffg\\react\\Chat-app-fullstack\\client\\src\\Containers\\MsgBar.js":"22","C:\\Users\\jeffg\\react\\Chat-app-fullstack\\client\\src\\Components\\Chat\\MsgBar.js":"23","C:\\Users\\jeffg\\react\\talxtime\\client\\src\\index.js":"24","C:\\Users\\jeffg\\react\\talxtime\\client\\src\\App.js":"25","C:\\Users\\jeffg\\react\\talxtime\\client\\src\\Router.js":"26","C:\\Users\\jeffg\\react\\talxtime\\client\\src\\Redux\\Store.js":"27","C:\\Users\\jeffg\\react\\talxtime\\client\\src\\Containers\\Navigation.js":"28","C:\\Users\\jeffg\\react\\talxtime\\client\\src\\Containers\\Login.js":"29","C:\\Users\\jeffg\\react\\talxtime\\client\\src\\Redux\\state.js":"30","C:\\Users\\jeffg\\react\\talxtime\\client\\src\\Redux\\reducers.js":"31","C:\\Users\\jeffg\\react\\talxtime\\client\\src\\Components\\Chat\\MessageView.js":"32","C:\\Users\\jeffg\\react\\talxtime\\client\\src\\Components\\Register.js":"33","C:\\Users\\jeffg\\react\\talxtime\\client\\src\\Components\\Landing.js":"34","C:\\Users\\jeffg\\react\\talxtime\\client\\src\\Components\\Navigation.js":"35","C:\\Users\\jeffg\\react\\talxtime\\client\\src\\Redux\\actions.js":"36","C:\\Users\\jeffg\\react\\talxtime\\client\\src\\Components\\Login.js":"37","C:\\Users\\jeffg\\react\\talxtime\\client\\src\\Containers\\Chat.js":"38","C:\\Users\\jeffg\\react\\talxtime\\client\\src\\Components\\Chat\\SideBar.js":"39","C:\\Users\\jeffg\\react\\talxtime\\client\\src\\Components\\Chat\\Chat.js":"40","C:\\Users\\jeffg\\react\\talxtime\\client\\src\\Containers\\SideBarList.js":"41","C:\\Users\\jeffg\\react\\talxtime\\client\\src\\Containers\\Contacts.js":"42","C:\\Users\\jeffg\\react\\talxtime\\client\\src\\Components\\Chat\\SideBarList.js":"43","C:\\Users\\jeffg\\react\\talxtime\\client\\src\\Components\\Chat\\Contacts.js":"44","C:\\Users\\jeffg\\react\\talxtime\\client\\src\\Containers\\MsgBar.js":"45","C:\\Users\\jeffg\\react\\talxtime\\client\\src\\Components\\Chat\\MsgBar.js":"46"},{"size":457,"mtime":1612124515507,"results":"47","hashOfConfig":"48"},{"size":413,"mtime":1612243104329,"results":"49","hashOfConfig":"48"},{"size":1057,"mtime":1616724329285,"results":"50","hashOfConfig":"48"},{"size":445,"mtime":1612284195709,"results":"51","hashOfConfig":"48"},{"size":254,"mtime":1616725146052,"results":"52","hashOfConfig":"48"},{"size":496,"mtime":1613194944835,"results":"53","hashOfConfig":"48"},{"size":125,"mtime":1612283023006,"results":"54","hashOfConfig":"48"},{"size":307,"mtime":1614203866782,"results":"55","hashOfConfig":"48"},{"size":3284,"mtime":1616544726845,"results":"56","hashOfConfig":"48"},{"size":2496,"mtime":1616724788836,"results":"57","hashOfConfig":"48"},{"size":1695,"mtime":1616633381414,"results":"58","hashOfConfig":"48"},{"size":102,"mtime":1615521202859,"results":"59","hashOfConfig":"48"},{"size":1053,"mtime":1616633559712,"results":"60","hashOfConfig":"48"},{"size":3339,"mtime":1616724498102,"results":"61","hashOfConfig":"48"},{"size":407,"mtime":1616375120991,"results":"62","hashOfConfig":"48"},{"size":3101,"mtime":1615173664225,"results":"63","hashOfConfig":"48"},{"size":462,"mtime":1616470588221,"results":"64","hashOfConfig":"48"},{"size":705,"mtime":1616633225916,"results":"65","hashOfConfig":"48"},{"size":5533,"mtime":1616723679753,"results":"66","hashOfConfig":"48"},{"size":1536,"mtime":1616511321195,"results":"67","hashOfConfig":"48"},{"size":3044,"mtime":1616637378572,"results":"68","hashOfConfig":"48"},{"size":240,"mtime":1614208509943,"results":"69","hashOfConfig":"48"},{"size":593,"mtime":1616724111117,"results":"70","hashOfConfig":"48"},{"size":457,"mtime":1612124515507,"results":"71","hashOfConfig":"72"},{"size":413,"mtime":1612243104329,"results":"73","hashOfConfig":"72"},{"size":1057,"mtime":1616724329285,"results":"74","hashOfConfig":"72"},{"size":254,"mtime":1616725146052,"results":"75","hashOfConfig":"72"},{"size":445,"mtime":1612284195709,"results":"76","hashOfConfig":"72"},{"size":496,"mtime":1613194944835,"results":"77","hashOfConfig":"72"},{"size":102,"mtime":1615521202859,"results":"78","hashOfConfig":"72"},{"size":1695,"mtime":1616633381414,"results":"79","hashOfConfig":"72"},{"size":307,"mtime":1614203866782,"results":"80","hashOfConfig":"72"},{"size":3720,"mtime":1617163345441,"results":"81","hashOfConfig":"72"},{"size":125,"mtime":1612283023006,"results":"82","hashOfConfig":"72"},{"size":2496,"mtime":1616724788836,"results":"83","hashOfConfig":"72"},{"size":1053,"mtime":1616633559712,"results":"84","hashOfConfig":"72"},{"size":3339,"mtime":1616724498102,"results":"85","hashOfConfig":"72"},{"size":407,"mtime":1616375120991,"results":"86","hashOfConfig":"72"},{"size":3149,"mtime":1616818269717,"results":"87","hashOfConfig":"72"},{"size":5586,"mtime":1616820374487,"results":"88","hashOfConfig":"72"},{"size":705,"mtime":1616633225916,"results":"89","hashOfConfig":"72"},{"size":462,"mtime":1616470588221,"results":"90","hashOfConfig":"72"},{"size":3027,"mtime":1616809205274,"results":"91","hashOfConfig":"72"},{"size":1616,"mtime":1616818262057,"results":"92","hashOfConfig":"72"},{"size":240,"mtime":1614208509943,"results":"93","hashOfConfig":"72"},{"size":593,"mtime":1616724111117,"results":"94","hashOfConfig":"72"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},"wyhn4p",{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"97"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"97"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"97"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"97"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"97"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"97"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},"4vcudc",{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"150"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"150"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"150"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"183","usedDeprecatedRules":"150"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"150"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"190","usedDeprecatedRules":"150"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},"C:\\Users\\jeffg\\react\\Chat-app-fullstack\\client\\src\\index.js",[],["197","198"],"C:\\Users\\jeffg\\react\\Chat-app-fullstack\\client\\src\\App.js",[],"C:\\Users\\jeffg\\react\\Chat-app-fullstack\\client\\src\\Router.js",["199"],"import React from 'react';\r\nimport { Switch, Route, Redirect } from 'react-router';\r\nimport cookie from 'cookie'\r\nimport Login from './Containers/Login';\r\nimport Register from './Components/Register';\r\nimport Landing from './Components/Landing';\r\nimport MessageView from './Components/Chat/MessageView';\r\n\r\nconst checkAuth = () => {\r\n    const cookies = cookie.parse(document.cookie)\r\n    return cookies[\"loggedIn\"] ? true : false\r\n}\r\n\r\nconst ProtectedRoute = ({component: Component, ...rest}) => {\r\n    return (\r\n        <Route\r\n        {...rest}\r\n        render={(props) => checkAuth()\r\n            ? <Component {...props} />\r\n            : <Redirect to=\"/login\" />}\r\n        />\r\n    )\r\n}\r\n\r\nconst Router = () => {\r\n    return (\r\n        <Switch>\r\n            <Route exact path=\"/\" component={Login} />\r\n            <ProtectedRoute exact path=\"/message\" component={MessageView} />\r\n            <Route path=\"/login\" component={Login} />\r\n            <Route path = \"/register\" component={Register}/>\r\n        </Switch>\r\n    );\r\n};\r\n\r\nexport default Router; ","C:\\Users\\jeffg\\react\\Chat-app-fullstack\\client\\src\\Containers\\Navigation.js",[],"C:\\Users\\jeffg\\react\\Chat-app-fullstack\\client\\src\\Redux\\Store.js",["200"],"import { createStore, applyMiddleware, compose } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport reducers from './reducers';\r\nimport state from './state';\r\n\r\nexport default createStore(\r\n    reducers, \r\n    state,\r\n    applyMiddleware(thunk),\r\n) ","C:\\Users\\jeffg\\react\\Chat-app-fullstack\\client\\src\\Containers\\Login.js",[],"C:\\Users\\jeffg\\react\\Chat-app-fullstack\\client\\src\\Components\\Landing.js",[],"C:\\Users\\jeffg\\react\\Chat-app-fullstack\\client\\src\\Components\\Chat\\MessageView.js",[],"C:\\Users\\jeffg\\react\\Chat-app-fullstack\\client\\src\\Components\\Register.js",[],"C:\\Users\\jeffg\\react\\Chat-app-fullstack\\client\\src\\Components\\Navigation.js",[],"C:\\Users\\jeffg\\react\\Chat-app-fullstack\\client\\src\\Redux\\reducers.js",[],"C:\\Users\\jeffg\\react\\Chat-app-fullstack\\client\\src\\Redux\\state.js",["201"],"export default {\r\n    loggedIn: false,\r\n    user: {},\r\n    recipient: {},\r\n    toggleSideBar: false\r\n}","C:\\Users\\jeffg\\react\\Chat-app-fullstack\\client\\src\\Redux\\actions.js",[],"C:\\Users\\jeffg\\react\\Chat-app-fullstack\\client\\src\\Components\\Login.js",[],"C:\\Users\\jeffg\\react\\Chat-app-fullstack\\client\\src\\Containers\\Chat.js",[],"C:\\Users\\jeffg\\react\\Chat-app-fullstack\\client\\src\\Components\\Chat\\SideBar.js",[],"C:\\Users\\jeffg\\react\\Chat-app-fullstack\\client\\src\\Containers\\Contacts.js",[],"C:\\Users\\jeffg\\react\\Chat-app-fullstack\\client\\src\\Containers\\SideBarList.js",["202"],"import { connect } from \"react-redux\";\r\nimport SideBarList from \"../Components/Chat/SideBarList\";\r\nimport {\r\n  getMessages,\r\n  toggleSideBar,\r\n  getContacts,\r\n  getRecipient\r\n} from \"../Redux/actions\";\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    user: state.user,\r\n    messages: state.messages,\r\n    toggleSideBar: state.toggleSideBar,\r\n    recipient: state.recipient,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    getMessages: (info) => dispatch(getMessages(info)),\r\n    toggleSideBar: () => dispatch(toggleSideBar()),\r\n    getRecipient: (user) => dispatch(getRecipient(user)),\r\n  };\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SideBarList);\r\n","C:\\Users\\jeffg\\react\\Chat-app-fullstack\\client\\src\\Components\\Chat\\Chat.js",["203","204","205","206"],"import React, { useState, useEffect } from \"react\";\r\nimport \"./ChatStyles.css\";\r\nimport MsgBar from \"../../Containers/MsgBar\";\r\nimport styled from \"styled-components\";\r\nimport useSocket from \"use-socket.io-client\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Icon from \"@material-ui/core/Icon\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nconst InputArea = styled.input`\r\n  position: static;\r\n  top: 0;\r\n  width: 87%;\r\n  height: 45px;\r\n  padding-left: 10px;\r\n  font-size: 15px;\r\n  background-color: #c1c1c1;\r\n  border: 1px solid lightgray;\r\n  outline: none;\r\n  letter-spacing: 1px;\r\n  line-height: 20px;\r\n`;\r\nconst BubbleMe = styled.p`\r\n  display: inline-block;\r\n  position: relative;\r\n  align-items: flex-end;\r\n  text-align: center;\r\n  font-size: 12pt;\r\n  max-width: 85vh;\r\n  height: auto;\r\n  padding-left: 15pt;\r\n  padding-right: 15pt;\r\n  padding-top: 5pt;\r\n  padding-bottom: 5pt;\r\n  margin: 7pt;\r\n  border: 2pt solid #2d88ff;\r\n  border-radius: 10px;\r\n  -webkit-border-radius: 10px;\r\n  -moz-border-radius: 10px;\r\n  color: #242526;\r\n  background-color: #2d88ff;\r\n  align-self: flex-end;\r\n`;\r\n\r\nconst BubbleYou = styled.p`\r\n  display: inline-block;\r\n  position: relative;\r\n  align-items: flex-start;\r\n  text-align: center;\r\n  font-size: 12pt;\r\n  max-width: 85vh;\r\n  padding-left: 15pt;\r\n  padding-right: 15pt;\r\n  padding-top: 5pt;\r\n  padding-bottom: 5pt;\r\n  margin: 10pt;\r\n  border: 2pt solid #3a3b3c;\r\n  border-radius: 10px;\r\n  -webkit-border-radius: 10px;\r\n  -moz-border-radius: 10px;\r\n  color: white;\r\n  background-color: #3a3b3c;\r\n`;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  page: {\r\n    margin: 0,\r\n    width: \"100%\",\r\n    height: \"500px\",\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  messageContainer: {\r\n    width: \"auto\",\r\n    height: \"100%\",\r\n    backgroundColor: \"#242526\",\r\n    overflowY: \"scroll\",\r\n  },\r\n  messageContent: {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    justifyContent: \"flex-end\",\r\n    width: \"auto\",\r\n    height: \"89%\",\r\n    marginBottom: 0,\r\n    marginRight: \"15pt\",\r\n    marginLeft: \"15pt\",\r\n    color: \"white\",\r\n    overflowY: \"auto\",\r\n  },\r\n  input: {\r\n    marginTop: 0,\r\n    width: \"auto\",\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n  button: {\r\n    margin: theme.spacing(1),\r\n    height: \"45px\",\r\n    marginLeft: 0,\r\n    marginBottom: \"9pt\",\r\n    backgroundColor: \"#FC4E50\",\r\n    color:\"white\",\r\n    width:\"70px\",\r\n    paddingLeft: \"40px\",\r\n  },\r\n}));\r\n\r\nconst Chat = (props) => {\r\n  const classes = useStyles();\r\n  const [input, setInput] = useState(\"\");\r\n  const [messages, setMessages] = useState([]);\r\n  const [socket] = useSocket(\"http://localhost:3001\");\r\n  let list = props.messages;\r\n  let toggle = props.toggleSideBar;\r\n  socket.connect();\r\n\r\n  let user = props.user;\r\n  let results;\r\n\r\n  //recieving message from server\r\n  //recieves on update of results from server\r\n  useEffect(() => {\r\n    socket.on(\"Output Chat Message\", (data) => {\r\n      results = data[0];\r\n      setMessages((messages) => [...messages, results]);\r\n    });\r\n    return () => { \r\n      socket.removeListener(\"Output Chat Message\");\r\n    };\r\n  }, [results]);\r\n\r\n  //displays old messages from database by to and from \r\n  //returns into messages state\r\n  useEffect(() => {\r\n    if (toggle) {\r\n      setMessages(\"\");\r\n      let userArray = list.map((item) => {\r\n        let userObj = { message: \"\", username: \"\" };\r\n        userObj.username = item.sender;\r\n        userObj.message = item.message;\r\n        return userObj;\r\n      });\r\n      setMessages(userArray);\r\n    }\r\n  }, [list]);\r\n\r\n  //sending message to server\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    let chatMessage = input;\r\n    let senderId = props.user.userId;\r\n    let recipientId = props.recipient._id;\r\n    let username = props.user.username;\r\n\r\n    socket.emit(\"Input Chat Message\", {\r\n      chatMessage,\r\n      senderId,\r\n      recipientId,\r\n      username,\r\n    });\r\n    setInput(\"\");\r\n  };\r\n\r\n  return (\r\n    <div className={classes.page}>\r\n      <MsgBar />\r\n      <div className={classes.messageContainer}>\r\n        <div className={classes.messageContent}>\r\n          {messages.map((item, index) => (\r\n            <div\r\n              className={`${\r\n                item.username == user.username\r\n                  ? \"align-self-end\"\r\n                  : \"align-self-start\"\r\n              }`}\r\n              key={index}\r\n            >\r\n              {item.username == user.username ? (\r\n                <BubbleMe>{item.message}</BubbleMe>\r\n              ) : (\r\n                <div>\r\n                  <p style={{ marginLeft: \"12pt\", marginBottom: \"0\" }}>\r\n                    {props.recipient.username}\r\n                  </p>\r\n                  <BubbleYou>{item.message}</BubbleYou>\r\n                </div>\r\n              )}\r\n            </div>\r\n          ))}\r\n        </div>\r\n        <div className={classes.input} style={{ position: \"sticky\" }}>\r\n          <form onSubmit={handleSubmit} style={{ marginLeft: \"15pt\" }}>\r\n            <InputArea\r\n              type=\"text\"\r\n              value={input}\r\n              onChange={(event) => setInput(event.target.value)}\r\n              onSubmit={handleSubmit}\r\n            />\r\n\r\n            <Button\r\n              variant=\"contained\"\r\n              className={classes.button}\r\n              endIcon={<Icon />}\r\n            >\r\n              Send\r\n            </Button>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default Chat;\r\n","C:\\Users\\jeffg\\react\\Chat-app-fullstack\\client\\src\\Components\\Chat\\Contacts.js",[],"C:\\Users\\jeffg\\react\\Chat-app-fullstack\\client\\src\\Components\\Chat\\SideBarList.js",["207","208"],"import React, { useState, useEffect } from \"react\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport ListItemAvatar from \"@material-ui/core/ListItemAvatar\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Avatar, List, Typography, Divider } from \"@material-ui/core\";\r\nimport logo from \"../../images/logo.jpg\";\r\nimport axios from \"axios\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  inline: {\r\n    display: \"inline\",\r\n  },\r\n}));\r\n\r\nconst SideBarList = (props) => {\r\n  const [loading, setLoading] = useState(true);\r\n  const [lastConversations, setLastConversations] = useState()\r\n  const classes = useStyles();\r\n  let userId = props.user.userId;\r\n\r\n  //populates a list of conversations on render, organized by username and \r\n  //the last message sent or recieved\r\n  useEffect(() => {\r\n    axios.post(\"/api/messages/conversations\", { senderId: userId })\r\n      .then(data => {\r\n        setLastConversations(data.data)\r\n        setLoading(false)\r\n      } )\r\n  }, [lastConversations]);\r\n\r\n  //fires when conversation is selected. compares selected conversation to \r\n  //user in contacts. \r\n  const handleSelection = (info) => {\r\n    axios.get(\"/api/users/contacts\")\r\n      .then(data => {\r\n        let contacts = data.data\r\n        let test = contacts.find((item) => info.conversationName == item.username);\r\n        props.getRecipient(test);\r\n      })\r\n    //gets messages from conversations to display in chat container\r\n    props.getMessages(info);\r\n    props.toggleSideBar();\r\n  };\r\n\r\n  return (\r\n    <List className={classes.chatList}>\r\n      {loading ? (\r\n        <div>Loading</div>\r\n      ) : (\r\n        <div>\r\n          {lastConversations.map((item, index) => (\r\n            <div key={index}>\r\n              <ListItem\r\n                alignItems=\"flex-start\"\r\n                style={{ color: \"white\", paddingRight: \"0\" }}\r\n              >\r\n                <ListItemAvatar>\r\n                  <Avatar alt={item.username} src={logo} />\r\n                </ListItemAvatar>\r\n                <ListItemText\r\n                  onClick={() =>\r\n                    handleSelection({\r\n                      senderId: props.user.userId,\r\n                      conversationName: item.conversationName,\r\n                    })\r\n                  }\r\n                  primary={item.conversationName}\r\n                  secondary={\r\n                    <React.Fragment>\r\n                      <Typography\r\n                        component=\"span\"\r\n                        variant=\"body2\"\r\n                        className={classes.inline}\r\n                        color=\"Primary\"\r\n                      >\r\n                        {item.message}\r\n                      </Typography>\r\n                    </React.Fragment>\r\n                  }\r\n                />\r\n              </ListItem>\r\n              <Divider variant=\"inset\" component=\"li\" />\r\n            </div>\r\n          ))}\r\n        </div>\r\n      )}\r\n    </List>\r\n  );\r\n};\r\nexport default SideBarList;\r\n","C:\\Users\\jeffg\\react\\Chat-app-fullstack\\client\\src\\Containers\\MsgBar.js",[],"C:\\Users\\jeffg\\react\\Chat-app-fullstack\\client\\src\\Components\\Chat\\MsgBar.js",[],"C:\\Users\\jeffg\\react\\talxtime\\client\\src\\index.js",[],["209","210"],"C:\\Users\\jeffg\\react\\talxtime\\client\\src\\App.js",[],"C:\\Users\\jeffg\\react\\talxtime\\client\\src\\Router.js",["211"],"C:\\Users\\jeffg\\react\\talxtime\\client\\src\\Redux\\Store.js",["212"],"C:\\Users\\jeffg\\react\\talxtime\\client\\src\\Containers\\Navigation.js",[],"C:\\Users\\jeffg\\react\\talxtime\\client\\src\\Containers\\Login.js",[],"C:\\Users\\jeffg\\react\\talxtime\\client\\src\\Redux\\state.js",["213"],"C:\\Users\\jeffg\\react\\talxtime\\client\\src\\Redux\\reducers.js",[],"C:\\Users\\jeffg\\react\\talxtime\\client\\src\\Components\\Chat\\MessageView.js",[],"C:\\Users\\jeffg\\react\\talxtime\\client\\src\\Components\\Register.js",["214","215"],"C:\\Users\\jeffg\\react\\talxtime\\client\\src\\Components\\Landing.js",[],"C:\\Users\\jeffg\\react\\talxtime\\client\\src\\Components\\Navigation.js",[],"C:\\Users\\jeffg\\react\\talxtime\\client\\src\\Redux\\actions.js",[],"C:\\Users\\jeffg\\react\\talxtime\\client\\src\\Components\\Login.js",[],"C:\\Users\\jeffg\\react\\talxtime\\client\\src\\Containers\\Chat.js",[],"C:\\Users\\jeffg\\react\\talxtime\\client\\src\\Components\\Chat\\SideBar.js",[],"C:\\Users\\jeffg\\react\\talxtime\\client\\src\\Components\\Chat\\Chat.js",["216","217","218","219"],"import React, { useState, useEffect } from \"react\";\r\nimport \"./ChatStyles.css\";\r\nimport MsgBar from \"../../Containers/MsgBar\";\r\nimport styled from \"styled-components\";\r\nimport useSocket from \"use-socket.io-client\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Icon from \"@material-ui/core/Icon\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nconst InputArea = styled.input`\r\n  position: static;\r\n  top: 0;\r\n  width: 87%;\r\n  height: 45px;\r\n  padding-left: 10px;\r\n  font-size: 15px;\r\n  background-color: #c1c1c1;\r\n  border: 1px solid lightgray;\r\n  outline: none;\r\n  letter-spacing: 1px;\r\n  line-height: 20px;\r\n`;\r\nconst BubbleMe = styled.p`\r\n  display: inline-block;\r\n  position: relative;\r\n  align-items: flex-end;\r\n  text-align: center;\r\n  font-size: 12pt;\r\n  max-width: 85vh;\r\n  height: auto;\r\n  padding-left: 15pt;\r\n  padding-right: 15pt;\r\n  padding-top: 5pt;\r\n  padding-bottom: 5pt;\r\n  margin: 7pt;\r\n  border: 2pt solid #2d88ff;\r\n  border-radius: 10px;\r\n  -webkit-border-radius: 10px;\r\n  -moz-border-radius: 10px;\r\n  color: #242526;\r\n  background-color: #2d88ff;\r\n  align-self: flex-end;\r\n`;\r\n\r\nconst BubbleYou = styled.p`\r\n  display: inline-block;\r\n  position: relative;\r\n  align-items: flex-start;\r\n  text-align: center;\r\n  font-size: 12pt;\r\n  max-width: 85vh;\r\n  padding-left: 15pt;\r\n  padding-right: 15pt;\r\n  padding-top: 5pt;\r\n  padding-bottom: 5pt;\r\n  margin: 10pt;\r\n  border: 2pt solid #3a3b3c;\r\n  border-radius: 10px;\r\n  -webkit-border-radius: 10px;\r\n  -moz-border-radius: 10px;\r\n  color: white;\r\n  background-color: #3a3b3c;\r\n`;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  page: {\r\n    margin: 0,\r\n    width: \"100%\",\r\n    height: \"500px\",\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  messageContainer: {\r\n    width: \"auto\",\r\n    height: \"100%\",\r\n    backgroundColor: \"#242526\",\r\n    overflowY: \"scroll\",\r\n  },\r\n  messageContent: {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    justifyContent: \"flex-end\",\r\n    width: \"auto\",\r\n    height: \"89%\",\r\n    marginBottom: 0,\r\n    marginRight: \"15pt\",\r\n    marginLeft: \"15pt\",\r\n    color: \"white\",\r\n    overflowY: \"auto\",\r\n  },\r\n  input: {\r\n    marginTop: 0,\r\n    width: \"auto\",\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n  button: {\r\n    margin: theme.spacing(1),\r\n    height: \"45px\",\r\n    marginLeft: 0,\r\n    marginBottom: \"9pt\",\r\n    backgroundColor: \"#FC4E50\",\r\n    color:\"white\",\r\n    width:\"90px\",\r\n    paddingLeft: \"40px\",\r\n  },\r\n}));\r\n\r\nconst Chat = (props) => {\r\n  const classes = useStyles();\r\n  const [input, setInput] = useState(\"\");\r\n  const [messages, setMessages] = useState([]);\r\n  const [socket] = useSocket();\r\n  let list = props.messages;\r\n  let toggle = props.toggleSideBar;\r\n  socket.connect();\r\n\r\n  let user = props.user;\r\n  let results;\r\n\r\n  //recieving message from server\r\n  //recieves on update of results from server\r\n  useEffect(() => {\r\n    socket.on(\"Output Chat Message\", (data) => {\r\n      results = data[0];\r\n      setMessages((messages) => [...messages, results]);\r\n    });\r\n    return () => { \r\n      socket.removeListener(\"Output Chat Message\");\r\n    };\r\n  }, [results]);\r\n\r\n  //displays old messages from database by to and from \r\n  //returns into messages state\r\n  useEffect(() => {\r\n    if (toggle) {\r\n      setMessages(\"\");\r\n      let userArray = list.map((item) => {\r\n        let userObj = { message: \"\", username: \"\" };\r\n        userObj.username = item.sender;\r\n        userObj.message = item.message;\r\n        return userObj;\r\n      });\r\n      setMessages(userArray);\r\n    }\r\n  }, [list]);\r\n\r\n  //sending message to server creates variables to send to database\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    let chatMessage = input;\r\n    let senderId = props.user.userId;\r\n    let recipientId = props.recipient._id;\r\n    let username = props.user.username;\r\n\r\n    socket.emit(\"Input Chat Message\", {\r\n      chatMessage,\r\n      senderId,\r\n      recipientId,\r\n      username,\r\n    });\r\n    setInput(\"\");\r\n  };\r\n\r\n  return (\r\n    <div className={classes.page}>\r\n      <MsgBar />\r\n      <div className={classes.messageContainer}>\r\n        <div className={classes.messageContent}>\r\n          {messages.map((item, index) => (\r\n            <div\r\n              className={`${\r\n                item.username == user.username\r\n                  ? \"align-self-end\"\r\n                  : \"align-self-start\"\r\n              }`}\r\n              key={index}\r\n            >\r\n              {item.username == user.username ? (\r\n                <BubbleMe>{item.message}</BubbleMe>\r\n              ) : (\r\n                <div>\r\n                  <p style={{ marginLeft: \"12pt\", marginBottom: \"0\" }}>\r\n                    {props.recipient.username}\r\n                  </p>\r\n                  <BubbleYou>{item.message}</BubbleYou>\r\n                </div>\r\n              )}\r\n            </div>\r\n          ))}\r\n        </div>\r\n        <div className={classes.input} style={{ position: \"sticky\" }}>\r\n          <form onSubmit={handleSubmit} style={{ marginLeft: \"15pt\" }}>\r\n            <InputArea\r\n              type=\"text\"\r\n              value={input}\r\n              onChange={(event) => setInput(event.target.value)}\r\n              onSubmit={handleSubmit}\r\n            />\r\n\r\n            <Button\r\n              variant=\"contained\"\r\n              onClick={handleSubmit}\r\n              className={classes.button}\r\n              endIcon={<Icon />}\r\n            >\r\n              Send\r\n            </Button>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default Chat;\r\n","C:\\Users\\jeffg\\react\\talxtime\\client\\src\\Containers\\SideBarList.js",["220"],"C:\\Users\\jeffg\\react\\talxtime\\client\\src\\Containers\\Contacts.js",[],"C:\\Users\\jeffg\\react\\talxtime\\client\\src\\Components\\Chat\\SideBarList.js",["221","222"],"import React, { useState, useEffect } from \"react\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport ListItemAvatar from \"@material-ui/core/ListItemAvatar\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Avatar, List, Typography, Divider } from \"@material-ui/core\";\r\nimport logo from \"../../images/logo.jpg\";\r\nimport axios from \"axios\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  inline: {\r\n    display: \"inline\",\r\n  },\r\n}));\r\n\r\nconst SideBarList = (props) => {\r\n  const [loading, setLoading] = useState(true);\r\n  const [lastConversations, setLastConversations] = useState()\r\n  const classes = useStyles();\r\n  let userId = props.user.userId;\r\n\r\n  //populates a list of conversations on render, organized by username and \r\n  //the last message sent or recieved\r\n  useEffect(() => {\r\n    axios.post(\"/api/messages/conversations\", { senderId: userId })\r\n      .then(data => {\r\n        setLastConversations(data.data)\r\n        setLoading(false)\r\n      } )\r\n  }, []);\r\n\r\n  //fires when conversation is selected. compares selected conversation to \r\n  //user in contacts. \r\n  const handleSelection = (info) => {\r\n    axios.get(\"/api/users/contacts\")\r\n      .then(data => {\r\n        let contacts = data.data\r\n        let test = contacts.find((item) => info.conversationName == item.username);\r\n        props.getRecipient(test);\r\n      })\r\n    //gets messages from conversations to display in chat container\r\n    props.getMessages(info);\r\n    props.toggleSideBar();\r\n  };\r\n\r\n  return (\r\n    <List className={classes.chatList}>\r\n      {loading ? (\r\n        <div>Loading</div>\r\n      ) : (\r\n        <div>\r\n          {lastConversations.map((item, index) => (\r\n            <div key={index}>\r\n              <ListItem\r\n                alignItems=\"flex-start\"\r\n                style={{ color: \"white\", paddingRight: \"0\" }}\r\n              >\r\n                <ListItemAvatar>\r\n                  <Avatar alt={item.username} src={logo} />\r\n                </ListItemAvatar>\r\n                <ListItemText\r\n                  onClick={() =>\r\n                    handleSelection({\r\n                      senderId: props.user.userId,\r\n                      conversationName: item.conversationName,\r\n                    })\r\n                  }\r\n                  primary={item.conversationName}\r\n                  secondary={\r\n                    <React.Fragment>\r\n                      <Typography\r\n                        component=\"span\"\r\n                        variant=\"body2\"\r\n                        className={classes.inline}\r\n                        color=\"Primary\"\r\n                      >\r\n                        {item.message}\r\n                      </Typography>\r\n                    </React.Fragment>\r\n                  }\r\n                />\r\n              </ListItem>\r\n              <Divider variant=\"inset\" component=\"li\" />\r\n            </div>\r\n          ))}\r\n        </div>\r\n      )}\r\n    </List>\r\n  );\r\n};\r\nexport default SideBarList;\r\n","C:\\Users\\jeffg\\react\\talxtime\\client\\src\\Components\\Chat\\Contacts.js",[],"C:\\Users\\jeffg\\react\\talxtime\\client\\src\\Containers\\MsgBar.js",[],"C:\\Users\\jeffg\\react\\talxtime\\client\\src\\Components\\Chat\\MsgBar.js",[],{"ruleId":"223","replacedBy":"224"},{"ruleId":"225","replacedBy":"226"},{"ruleId":"227","severity":1,"message":"228","line":6,"column":8,"nodeType":"229","messageId":"230","endLine":6,"endColumn":15},{"ruleId":"227","severity":1,"message":"231","line":1,"column":40,"nodeType":"229","messageId":"230","endLine":1,"endColumn":47},{"ruleId":"232","severity":1,"message":"233","line":1,"column":1,"nodeType":"234","endLine":6,"endColumn":2},{"ruleId":"227","severity":1,"message":"235","line":6,"column":3,"nodeType":"229","messageId":"230","endLine":6,"endColumn":14},{"ruleId":"236","severity":1,"message":"237","line":130,"column":17,"nodeType":"238","endLine":130,"endColumn":24},{"ruleId":"236","severity":1,"message":"239","line":151,"column":6,"nodeType":"240","endLine":151,"endColumn":12,"suggestions":"241"},{"ruleId":"242","severity":1,"message":"243","line":178,"column":31,"nodeType":"244","messageId":"245","endLine":178,"endColumn":33},{"ruleId":"242","severity":1,"message":"243","line":184,"column":30,"nodeType":"244","messageId":"245","endLine":184,"endColumn":32},{"ruleId":"236","severity":1,"message":"246","line":30,"column":6,"nodeType":"240","endLine":30,"endColumn":25,"suggestions":"247"},{"ruleId":"242","severity":1,"message":"243","line":38,"column":66,"nodeType":"244","messageId":"245","endLine":38,"endColumn":68},{"ruleId":"223","replacedBy":"248"},{"ruleId":"225","replacedBy":"249"},{"ruleId":"227","severity":1,"message":"228","line":6,"column":8,"nodeType":"229","messageId":"230","endLine":6,"endColumn":15},{"ruleId":"227","severity":1,"message":"231","line":1,"column":40,"nodeType":"229","messageId":"230","endLine":1,"endColumn":47},{"ruleId":"232","severity":1,"message":"233","line":1,"column":1,"nodeType":"234","endLine":6,"endColumn":2},{"ruleId":"227","severity":1,"message":"250","line":1,"column":17,"nodeType":"229","messageId":"230","endLine":1,"endColumn":25},{"ruleId":"227","severity":1,"message":"251","line":71,"column":7,"nodeType":"229","messageId":"230","endLine":71,"endColumn":14},{"ruleId":"236","severity":1,"message":"237","line":130,"column":17,"nodeType":"238","endLine":130,"endColumn":24},{"ruleId":"236","severity":1,"message":"239","line":151,"column":6,"nodeType":"240","endLine":151,"endColumn":12,"suggestions":"252"},{"ruleId":"242","severity":1,"message":"243","line":178,"column":31,"nodeType":"244","messageId":"245","endLine":178,"endColumn":33},{"ruleId":"242","severity":1,"message":"243","line":184,"column":30,"nodeType":"244","messageId":"245","endLine":184,"endColumn":32},{"ruleId":"227","severity":1,"message":"235","line":6,"column":3,"nodeType":"229","messageId":"230","endLine":6,"endColumn":14},{"ruleId":"236","severity":1,"message":"246","line":30,"column":6,"nodeType":"240","endLine":30,"endColumn":8,"suggestions":"253"},{"ruleId":"242","severity":1,"message":"243","line":38,"column":66,"nodeType":"244","messageId":"245","endLine":38,"endColumn":68},"no-native-reassign",["254"],"no-negated-in-lhs",["255"],"no-unused-vars","'Landing' is defined but never used.","Identifier","unusedVar","'compose' is defined but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'getContacts' is defined but never used.","react-hooks/exhaustive-deps","Assignments to the 'results' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","MemberExpression","React Hook useEffect has a missing dependency: 'toggle'. Either include it or remove the dependency array.","ArrayExpression",["256"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","React Hook useEffect has a missing dependency: 'userId'. Either include it or remove the dependency array.",["257"],["254"],["255"],"'useState' is defined but never used.","'history' is assigned a value but never used.",["258"],["259"],"no-global-assign","no-unsafe-negation",{"desc":"260","fix":"261"},{"desc":"262","fix":"263"},{"desc":"260","fix":"264"},{"desc":"265","fix":"266"},"Update the dependencies array to be: [list, toggle]",{"range":"267","text":"268"},"Update the dependencies array to be: [lastConversations, userId]",{"range":"269","text":"270"},{"range":"271","text":"268"},"Update the dependencies array to be: [userId]",{"range":"272","text":"273"},[3598,3604],"[list, toggle]",[1054,1073],"[lastConversations, userId]",[3575,3581],[1054,1056],"[userId]"]